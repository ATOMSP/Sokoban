<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Nov 24 13:25:28 2022
<BR><P>
<H3>Maximum Stack Usage =        704 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Event(void*, int) &rArr; APP::RamSendToSd(const char*, void*) &rArr; APP::File_Write(const char*, void*, unsigned) &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[127]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">NMI_Handler</a><BR>
 <LI><a href="#[13]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">HardFault_Handler</a><BR>
 <LI><a href="#[14]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">MemManage_Handler</a><BR>
 <LI><a href="#[15]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">BusFault_Handler</a><BR>
 <LI><a href="#[16]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">UsageFault_Handler</a><BR>
 <LI><a href="#[17]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">SVC_Handler</a><BR>
 <LI><a href="#[18]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">DebugMon_Handler</a><BR>
 <LI><a href="#[19]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">PendSV_Handler</a><BR>
 <LI><a href="#[2d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">ADC_IRQHandler</a><BR>
 <LI><a href="#[13e]">pinMode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13e]">pinMode</a><BR>
 <LI><a href="#[13d]">PWM_Init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13e]">pinMode</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[15]">BusFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2f]">CAN1_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[30]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[31]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2e]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5c]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6a]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[69]">DCMI_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[18]">DebugMon_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[21]">EXTI0_IRQHandler</a> from exti.o(i.EXTI0_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">EXTI15_10_IRQHandler</a> from exti.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[22]">EXTI1_IRQHandler</a> from exti.o(i.EXTI1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[23]">EXTI2_IRQHandler</a> from exti.o(i.EXTI2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[24]">EXTI3_IRQHandler</a> from exti.o(i.EXTI3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[25]">EXTI4_IRQHandler</a> from exti.o(i.EXTI4_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[32]">EXTI9_5_IRQHandler</a> from exti.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1f]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6c]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4b]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6b]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[13]">HardFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3b]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3a]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3d]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3c]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[64]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[63]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[14]">MemManage_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5e]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[66]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[65]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[68]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[67]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1c]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[20]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1e]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">SDIO_IRQHandler</a> from sdfatfs.o(i.SDIO_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3e]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1a]">SysTick_Handler</a> from delay.o(i.SysTick_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6d]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[1d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[33]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[36]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[35]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[34]">TIM1_UP_TIM10_IRQHandler</a> from timer.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[37]">TIM2_IRQHandler</a> from timer.o(i.TIM2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[38]">TIM3_IRQHandler</a> from timer.o(i.TIM3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[39]">TIM4_IRQHandler</a> from timer.o(i.TIM4_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">TIM5_IRQHandler</a> from timer.o(i.TIM5_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">TIM6_DAC_IRQHandler</a> from timer.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">TIM7_IRQHandler</a> from timer.o(i.TIM7_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[47]">TIM8_UP_TIM13_IRQHandler</a> from timer.o(i.TIM8_UP_TIM13_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4f]">UART4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">USART1_IRQHandler</a> from hardwareserial.o(i.USART1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">USART2_IRQHandler</a> from hardwareserial.o(i.USART2_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">USART3_IRQHandler</a> from hardwareserial.o(i.USART3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[62]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[16]">UsageFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1b]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[93]">piclib_Fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</a> from piclib.o(i._Z11piclib_Fillttttt) referenced from piclib.o(i.piclib_init)
 <LI><a href="#[8e]">jpeg_in_func(JDEC*, unsigned char*, unsigned)</a> from tjpgd.o(i._Z12jpeg_in_funcP4JDECPhj) referenced from tjpgd.o(i.jpg_decode)
 <LI><a href="#[91]">LCD_ReadPoint(unsigned short, unsigned short)</a> from piclib.o(i._Z13LCD_ReadPointtt) referenced from piclib.o(i.piclib_init)
 <LI><a href="#[86]">Tone_Callback(unsigned, unsigned short)</a> from app_music.o(i._Z13Tone_Callbackjt) referenced from app_music.o(i._ZN3APP10Audio_InitEv)
 <LI><a href="#[87]">Button_CallBack(ButtonEvent*, int)</a> from button.o(i._Z15Button_CallBackP11ButtonEventi) referenced from button.o(i._ZN3HAL11Button_InitEv)
 <LI><a href="#[92]">piclib_Draw_Point(unsigned short, unsigned short, unsigned short)</a> from piclib.o(i._Z17piclib_Draw_Pointttt) referenced from piclib.o(i.piclib_init)
 <LI><a href="#[94]">piclib_draw_hline(unsigned short, unsigned short, unsigned short, unsigned short)</a> from piclib.o(i._Z17piclib_draw_hlinetttt) referenced from piclib.o(i.piclib_init)
 <LI><a href="#[95]">piclib_fill_color(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short*)</a> from piclib.o(i._Z17piclib_fill_colorttttPt) referenced from piclib.o(i.piclib_init)
 <LI><a href="#[84]">tone_TimerHandler()</a> from tone.o(i._Z17tone_TimerHandlerv) referenced from tone.o(i._Z4tonehj)
 <LI><a href="#[90]">jpeg_out_func_fill(JDEC*, void*, JRECT*)</a> from tjpgd.o(i._Z18jpeg_out_func_fillP4JDECPvP5JRECT) referenced from tjpgd.o(i.jpg_decode)
 <LI><a href="#[85]">HAL_InterrputUpdate()</a> from main.o(i._Z19HAL_InterrputUpdatev) referenced from main.o(i._Z5setupv)
 <LI><a href="#[8f]">jpeg_out_func_point(JDEC*, void*, JRECT*)</a> from tjpgd.o(i._Z19jpeg_out_func_pointP4JDECPvP5JRECT) referenced from tjpgd.o(i.jpg_decode)
 <LI><a href="#[88]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[75]">Exit()</a> from page_game.o(i._Z4Exitv) referenced from page_game.o(i._Z17PageRegister_Gameh)
 <LI><a href="#[79]">Exit()</a> from page_about.o(i._Z4Exitv) referenced from page_about.o(i._Z18PageRegister_Abouth)
 <LI><a href="#[7c]">Exit()</a> from page_level.o(i._Z4Exitv) referenced from page_level.o(i._Z18PageRegister_Levelh)
 <LI><a href="#[7f]">Exit()</a> from page_master.o(i._Z4Exitv) referenced from page_master.o(i._Z19PageRegister_Masterh)
 <LI><a href="#[82]">Exit()</a> from page_displate.o(i._Z4Exitv) referenced from page_displate.o(i._Z21PageRegister_Displateh)
 <LI><a href="#[76]">Loop()</a> from page_game.o(i._Z4Loopv) referenced from page_game.o(i._Z17PageRegister_Gameh)
 <LI><a href="#[74]">Event(void*, int)</a> from page_game.o(i._Z5EventPvi) referenced from page_game.o(i._Z17PageRegister_Gameh)
 <LI><a href="#[78]">Event(void*, int)</a> from page_about.o(i._Z5EventPvi) referenced from page_about.o(i._Z18PageRegister_Abouth)
 <LI><a href="#[7b]">Event(void*, int)</a> from page_level.o(i._Z5EventPvi) referenced from page_level.o(i._Z18PageRegister_Levelh)
 <LI><a href="#[7e]">Event(void*, int)</a> from page_master.o(i._Z5EventPvi) referenced from page_master.o(i._Z19PageRegister_Masterh)
 <LI><a href="#[81]">Event(void*, int)</a> from page_displate.o(i._Z5EventPvi) referenced from page_displate.o(i._Z21PageRegister_Displateh)
 <LI><a href="#[77]">Setup()</a> from page_game.o(i._Z5Setupv) referenced from page_game.o(i._Z17PageRegister_Gameh)
 <LI><a href="#[7a]">Setup()</a> from page_about.o(i._Z5Setupv) referenced from page_about.o(i._Z18PageRegister_Abouth)
 <LI><a href="#[7d]">Setup()</a> from page_level.o(i._Z5Setupv) referenced from page_level.o(i._Z18PageRegister_Levelh)
 <LI><a href="#[80]">Setup()</a> from page_master.o(i._Z5Setupv) referenced from page_master.o(i._Z19PageRegister_Masterh)
 <LI><a href="#[83]">Setup()</a> from page_displate.o(i._Z5Setupv) referenced from page_displate.o(i._Z21PageRegister_Displateh)
 <LI><a href="#[8a]">Draw_hook(const unsigned char*, int, int, int, int)</a> from display.o(i._Z9Draw_hookPKhiiii) referenced from display.o(i.__sti___11_Display_cpp_1af8a7d1)
 <LI><a href="#[8b]">Load_hook(const unsigned char*, void*)</a> from display.o(i._Z9Load_hookPKhPv) referenced from display.o(i.__sti___11_Display_cpp_1af8a7d1)
 <LI><a href="#[89]">PageManager::~PageManager()</a> from pagemanager.o(i._ZN11PageManagerD1Ev) referenced from display.o(i.__sti___11_Display_cpp_1af8a7d1)
 <LI><a href="#[99]">Adafruit_GFX::startWrite()</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX10startWriteEv) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[99]">Adafruit_GFX::startWrite()</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX10startWriteEv) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[9a]">Adafruit_GFX::writePixel(short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX10writePixelEsst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[9a]">Adafruit_GFX::writePixel(short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX10writePixelEsst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[a1]">Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX13drawFastHLineEssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[a0]">Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX13drawFastVLineEssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[9b]">Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX13writeFillRectEsssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[9b]">Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX13writeFillRectEsssst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[9d]">Adafruit_GFX::writeFastHLine(short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX14writeFastHLineEssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[9d]">Adafruit_GFX::writeFastHLine(short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX14writeFastHLineEssst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[9c]">Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX14writeFastVLineEssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[9c]">Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX14writeFastVLineEssst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[96]">Adafruit_GFX::write(unsigned char)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX5writeEh) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[96]">Adafruit_GFX::write(unsigned char)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX5writeEh) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[a3]">Adafruit_GFX::drawRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8drawRectEsssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[a3]">Adafruit_GFX::drawRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8drawRectEsssst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[9f]">Adafruit_GFX::endWrite()</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8endWriteEv) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[9f]">Adafruit_GFX::endWrite()</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8endWriteEv) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[a2]">Adafruit_GFX::fillRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8fillRectEsssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[a2]">Adafruit_GFX::fillRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8fillRectEsssst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[9e]">Adafruit_GFX::writeLine(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX9writeLineEsssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[9e]">Adafruit_GFX::writeLine(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX9writeLineEsssst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[a4]">HardwareSerial::write(unsigned char)</a> from hardwareserial.o(i._ZN14HardwareSerial5writeEh) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[a9]">Adafruit_ST7789::fillScreen(unsigned short)</a> from adafruit_st7789.o(i._ZN15Adafruit_ST778910fillScreenEt) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[a6]">Adafruit_ST7789::setRotation(unsigned char)</a> from adafruit_st7789.o(i._ZN15Adafruit_ST778911setRotationEh) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[a8]">Adafruit_ST7789::drawFastHLine(short, short, short, unsigned short)</a> from adafruit_st7789.o(i._ZN15Adafruit_ST778913drawFastHLineEssst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[a7]">Adafruit_ST7789::drawFastVLine(short, short, short, unsigned short)</a> from adafruit_st7789.o(i._ZN15Adafruit_ST778913drawFastVLineEssst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[aa]">Adafruit_ST7789::setAddrWindow(short, short, short, short)</a> from adafruit_st7789.o(i._ZN15Adafruit_ST778913setAddrWindowEssss) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[ac]">Adafruit_ST7789::drawFastRGBBitmap(short, short, unsigned short*, short, short)</a> from adafruit_st7789.o(i._ZN15Adafruit_ST778917drawFastRGBBitmapEssPtss) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[a5]">Adafruit_ST7789::drawPixel(short, short, unsigned short)</a> from adafruit_st7789.o(i._ZN15Adafruit_ST77899drawPixelEsst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[ab]">Adafruit_ST7789::setCursor(short, short)</a> from adafruit_st7789.o(i._ZN15Adafruit_ST77899setCursorEss) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[8d]">MillisTaskManager::~MillisTaskManager()</a> from millistaskmanager.o(i._ZN17MillisTaskManagerD1Ev) referenced from main.o(i.__sti___8_main_cpp_0040b0e8)
 <LI><a href="#[73]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[97]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[97]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[97]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[8c]">TwoWire::~TwoWire()</a> from wire.o(i._ZN7TwoWireD1Ev) referenced from wire.o(i.__sti___8_Wire_cpp_928ee5ff)
 <LI><a href="#[98]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[b5]">__main</a> from __main.o(!!!main) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[af]">__sti___10_Button_cpp_1974fa3d</a> from button.o(i.__sti___10_Button_cpp_1974fa3d) referenced from button.o(.init_array)
 <LI><a href="#[b1]">__sti___11_Display_cpp_1af8a7d1</a> from display.o(i.__sti___11_Display_cpp_1af8a7d1) referenced from display.o(.init_array)
 <LI><a href="#[ae]">__sti___11_Sdfatfs_cpp_SD_PATH</a> from sdfatfs.o(i.__sti___11_Sdfatfs_cpp_SD_PATH) referenced from sdfatfs.o(.init_array)
 <LI><a href="#[b0]">__sti___13_APP_Music_cpp_6a466ea6</a> from app_music.o(i.__sti___13_APP_Music_cpp_6a466ea6) referenced from app_music.o(.init_array)
 <LI><a href="#[b2]">__sti___18_HardwareSerial_cpp_cfa1b6a6</a> from hardwareserial.o(i.__sti___18_HardwareSerial_cpp_cfa1b6a6) referenced from hardwareserial.o(.init_array)
 <LI><a href="#[b3]">__sti___7_SPI_cpp_ce5662b4</a> from spi.o(i.__sti___7_SPI_cpp_ce5662b4) referenced from spi.o(.init_array)
 <LI><a href="#[b4]">__sti___8_Wire_cpp_928ee5ff</a> from wire.o(i.__sti___8_Wire_cpp_928ee5ff) referenced from wire.o(.init_array)
 <LI><a href="#[ad]">__sti___8_main_cpp_0040b0e8</a> from main.o(i.__sti___8_main_cpp_0040b0e8) referenced from main.o(.init_array)
 <LI><a href="#[6f]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[72]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[70]">_snputc</a> from _snputc.o(.text) referenced from c89vsnprintf.o(.text)
 <LI><a href="#[71]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b5]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b7]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b9]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[227]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[228]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ba]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[229]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[bb]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[101]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[bd]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[bf]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c1]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c2]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[22a]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[22b]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[c3]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c5]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c6]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c7]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[c9]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[cb]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[cd]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[ce]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[cf]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[d1]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[22c]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[d3]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[d5]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[d7]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[d9]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[22d]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[ea]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[db]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[dd]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[22e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[22f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[df]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[230]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[231]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[232]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[e1]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[233]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[234]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[e2]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[235]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[236]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[237]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[238]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[239]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[23a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[23b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[23c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[23d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[23e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[23f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[240]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[241]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ef]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[e5]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[242]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[243]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[244]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[245]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[246]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[247]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[248]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[b8]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[249]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[e7]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e9]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[24a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[eb]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; setup() &rArr; HAL::SDfatfs_Init() &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[24b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[128]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ee]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[24c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[f0]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1ac]"></a>_INTX_DISABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdfatfs.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteBlock(unsigned char*, long long, unsigned short)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadBlock(unsigned char*, long long, unsigned short)
</UL>

<P><STRONG><a name="[1af]"></a>_INTX_ENABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sdfatfs.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteBlock(unsigned char*, long long, unsigned short)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadBlock(unsigned char*, long long, unsigned short)
</UL>

<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[24d]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f2]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[f3]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
</UL>

<P><STRONG><a name="[f6]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[24e]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[f7]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f9]"></a>__c89vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, c89vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printf(const char*, ...)
</UL>

<P><STRONG><a name="[fb]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::RamSendToSd(const char*, void*)
</UL>

<P><STRONG><a name="[10b]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[10c]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[c4]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[ff]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_0040b0e8
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_Display_cpp_1af8a7d1
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Wire_cpp_928ee5ff
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadDisk(unsigned char*, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[104]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[24f]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonEvent::ButtonEvent(unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[250]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Audio_PlayMusic(const char*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[253]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[f4]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[e0]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1f9]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[103]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[254]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[107]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[de]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[109]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[5]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[fd]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[10a]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[fe]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[bc]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[256]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[fa]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[71]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> c89vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[cc]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[118]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[c8]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[d0]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[119]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[ca]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[d2]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[be]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[e6]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[11a]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[257]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[25a]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[25b]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[112]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[115]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[11e]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[d4]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[d6]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[11f]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[d8]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[da]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[10e]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[117]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[11c]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[108]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[11b]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[11d]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[122]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[f1]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[25c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[124]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[ed]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[123]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[121]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[120]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[125]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[25f]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[129]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[12b]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[10f]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[12d]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[12c]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[12e]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[12f]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[110]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[111]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[130]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[131]"></a>ADC_DMA_Register</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, adc.o(i.ADC_DMA_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_DMA_Register &rArr; ADC_DMA_SearchChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_SearchChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[1ba]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_DMA_Config(unsigned*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1b7]"></a>DMA_DeInit</STRONG> (Thumb, 272 bytes, Stack size 28 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_DMA_Config(unsigned*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1b9]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_FlowControllerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_DMA_Config(unsigned*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1b6]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_DMA_Config(unsigned*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1b8]"></a>DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_DMA_Config(unsigned*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[133]"></a>Delay_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, delay.o(i.Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Delay_Init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, exti.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, exti.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, exti.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, exti.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, exti.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, exti.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, exti.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[137]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>EXTI_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>GPIO_GetPinNum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.GPIO_GetPinNum))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinSource
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[139]"></a>GPIO_GetPinSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.GPIO_GetPinSource))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinNum
</UL>

<P><STRONG><a name="[13c]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
</UL>

<P><STRONG><a name="[140]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[13a]"></a>GPIOx_Init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, gpio.o(i.GPIOx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIOx_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[15a]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptBase
</UL>

<P><STRONG><a name="[225]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>PWM_Init</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, pwm.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = PWM_Init &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetGPIO_AF
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinNum
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display_Init()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[13b]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
</UL>

<P><STRONG><a name="[156]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ClockCmd
</UL>

<P><STRONG><a name="[149]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[155]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ClockCmd
</UL>

<P><STRONG><a name="[148]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[162]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[1ae]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdError()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::FindSCR(unsigned short, unsigned*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::IsCardProgramming(unsigned char*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ProcessIRQSrc()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteBlock(unsigned char*, long long, unsigned short)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp7Error()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp6Error(unsigned char, unsigned short*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp3Error()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp2Error()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp1Error(unsigned char)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadBlock(unsigned char*, long long, unsigned short)
</UL>

<P><STRONG><a name="[1aa]"></a>SDIO_DataConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::FindSCR(unsigned short, unsigned*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteBlock(unsigned char*, long long, unsigned short)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadBlock(unsigned char*, long long, unsigned short)
</UL>

<P><STRONG><a name="[1ad]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdError()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::FindSCR(unsigned short, unsigned*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::IsCardProgramming(unsigned char*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ProcessIRQSrc()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteBlock(unsigned char*, long long, unsigned short)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp6Error(unsigned char, unsigned short*)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp3Error()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp2Error()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp1Error(unsigned char)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadBlock(unsigned char*, long long, unsigned short)
</UL>

<P><STRONG><a name="[1bf]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_InitializeCards()
</UL>

<P><STRONG><a name="[4c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdfatfs.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDIO_IRQHandler &rArr; SD_Manager::SD_ProcessIRQSrc() &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ProcessIRQSrc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19d]"></a>SDIO_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_sdio.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_PowerON()
</UL>

<P><STRONG><a name="[19f]"></a>SDIO_SendCommand</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::FindSCR(unsigned short, unsigned*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_InitializeCards()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_SelectDeselect(unsigned)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::IsCardProgramming(unsigned char*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ProcessIRQSrc()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteBlock(unsigned char*, long long, unsigned short)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadBlock(unsigned char*, long long, unsigned short)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SDEnWideBus(unsigned char)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_PowerON()
</UL>

<P><STRONG><a name="[19e]"></a>SDIO_SetPowerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_PowerON()
</UL>

<P><STRONG><a name="[1f6]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setClock(unsigned)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPI_Settings(SPI_TypeDef*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[1f7]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setClock(unsigned)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPI_Settings(SPI_TypeDef*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, delay.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[134]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[6d]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timer.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_UP_TIM10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM2_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM3_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM4_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM6_DAC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM7_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM7_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timer.o(i.TIM8_UP_TIM13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM8_UP_TIM13_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[15b]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptBase
</UL>

<P><STRONG><a name="[146]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noTone(unsigned char)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[154]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[147]"></a>TIM_DeInit</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptBase
</UL>

<P><STRONG><a name="[13f]"></a>TIM_GetGPIO_AF</STRONG> (Thumb, 202 bytes, Stack size 36 bytes, pwm.o(i.TIM_GetGPIO_AF))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_GetGPIO_AF
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[145]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_UP_TIM13_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptBase
</UL>

<P><STRONG><a name="[14c]"></a>TIM_OC1Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[14d]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[14e]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[14f]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[150]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[151]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[152]"></a>TIM_OC4Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[153]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[15f]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_PrescalerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptTimeUpdate
</UL>

<P><STRONG><a name="[15e]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetAutoreload))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptTimeUpdate
</UL>

<P><STRONG><a name="[14b]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptBase
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[142]"></a>TIMx_OCxInit</STRONG> (Thumb, 286 bytes, Stack size 88 bytes, pwm.o(i.TIMx_OCxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIMx_OCxInit &rArr; TIM_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ClockCmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[14a]"></a>Timer_ClockCmd</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, timer.o(i.Timer_ClockCmd))
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptBase
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[157]"></a>Timer_SetInterrupt</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, timer.o(i.Timer_SetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Timer_SetInterrupt &rArr; Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptBase
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TimeToArrPsc
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[159]"></a>Timer_SetInterruptBase</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, timer.o(i.Timer_SetInterruptBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ClockCmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterrupt
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[15d]"></a>Timer_SetInterruptTimeUpdate</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, timer.o(i.Timer_SetInterruptTimeUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Timer_SetInterruptTimeUpdate &rArr; Timer_TimeToArrPsc
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TimeToArrPsc
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[40]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardwareserial.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_IRQHandler &rArr; HardwareSerial::IRQHandler() &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardwareserial.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART2_IRQHandler &rArr; HardwareSerial::IRQHandler() &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardwareserial.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART3_IRQHandler &rArr; HardwareSerial::IRQHandler() &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d4]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>

<P><STRONG><a name="[1d8]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1d9]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(unsigned char)
</UL>

<P><STRONG><a name="[1d2]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>

<P><STRONG><a name="[1d7]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ITConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[161]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_usart.o(i.USART_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1d3]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>

<P><STRONG><a name="[1da]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(unsigned char)
</UL>

<P><STRONG><a name="[93]"></a>piclib_Fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, piclib.o(i._Z11piclib_Fillttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = piclib_Fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Adafruit_GFX::fillRect(short, short, short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillRect(short, short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> piclib.o(i.piclib_init)
</UL>
<P><STRONG><a name="[8e]"></a>jpeg_in_func(JDEC*, unsigned char*, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tjpgd.o(i._Z12jpeg_in_funcP4JDECPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = jpeg_in_func(JDEC*, unsigned char*, unsigned) &rArr; f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tjpgd.o(i.jpg_decode)
</UL>
<P><STRONG><a name="[91]"></a>LCD_ReadPoint(unsigned short, unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, piclib.o(i._Z13LCD_ReadPointtt))
<BR>[Address Reference Count : 1]<UL><LI> piclib.o(i.piclib_init)
</UL>
<P><STRONG><a name="[87]"></a>Button_CallBack(ButtonEvent*, int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, button.o(i._Z15Button_CallBackP11ButtonEventi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Button_CallBack(ButtonEvent*, int) &rArr; PageManager::PageEventTransmit(void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageEventTransmit(void*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(i._ZN3HAL11Button_InitEv)
</UL>
<P><STRONG><a name="[176]"></a>PageRegister_Game(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, page_game.o(i._Z17PageRegister_Gameh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PageRegister_Game(unsigned char) &rArr; PageManager::PageRegister(unsigned char, void(*)(), void(*)(), void(*)(), void(*)(void*, int))
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageRegister(unsigned char, void(*)(), void(*)(), void(*)(), void(*)(void*, int))
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display_Init()
</UL>

<P><STRONG><a name="[92]"></a>piclib_Draw_Point(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, piclib.o(i._Z17piclib_Draw_Pointttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = piclib_Draw_Point(unsigned short, unsigned short, unsigned short) &rArr; Adafruit_ST7789::drawPixel(short, short, unsigned short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::drawPixel(short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> piclib.o(i.piclib_init)
</UL>
<P><STRONG><a name="[94]"></a>piclib_draw_hline(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, piclib.o(i._Z17piclib_draw_hlinetttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = piclib_draw_hline(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; Adafruit_ST7789::drawFastHLine(short, short, short, unsigned short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::drawFastHLine(short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> piclib.o(i.piclib_init)
</UL>
<P><STRONG><a name="[95]"></a>piclib_fill_color(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, piclib.o(i._Z17piclib_fill_colorttttPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = piclib_fill_color(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short*) &rArr; Adafruit_ST7789::drawFastRGBBitmap(short, short, unsigned short*, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::drawFastRGBBitmap(short, short, unsigned short*, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> piclib.o(i.piclib_init)
</UL>
<P><STRONG><a name="[17a]"></a>PageRegister_About(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, page_about.o(i._Z18PageRegister_Abouth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PageRegister_About(unsigned char) &rArr; PageManager::PageRegister(unsigned char, void(*)(), void(*)(), void(*)(), void(*)(void*, int))
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageRegister(unsigned char, void(*)(), void(*)(), void(*)(), void(*)(void*, int))
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display_Init()
</UL>

<P><STRONG><a name="[17b]"></a>PageRegister_Level(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, page_level.o(i._Z18PageRegister_Levelh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PageRegister_Level(unsigned char) &rArr; PageManager::PageRegister(unsigned char, void(*)(), void(*)(), void(*)(), void(*)(void*, int))
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageRegister(unsigned char, void(*)(), void(*)(), void(*)(), void(*)(void*, int))
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display_Init()
</UL>

<P><STRONG><a name="[90]"></a>jpeg_out_func_fill(JDEC*, void*, JRECT*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tjpgd.o(i._Z18jpeg_out_func_fillP4JDECPvP5JRECT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jpeg_out_func_fill(JDEC*, void*, JRECT*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tjpgd.o(i.jpg_decode)
</UL>
<P><STRONG><a name="[180]"></a>PageRegister_Master(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, page_master.o(i._Z19PageRegister_Masterh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PageRegister_Master(unsigned char) &rArr; PageManager::PageRegister(unsigned char, void(*)(), void(*)(), void(*)(), void(*)(void*, int))
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageRegister(unsigned char, void(*)(), void(*)(), void(*)(), void(*)(void*, int))
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display_Init()
</UL>

<P><STRONG><a name="[8f]"></a>jpeg_out_func_point(JDEC*, void*, JRECT*)</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, tjpgd.o(i._Z19jpeg_out_func_pointP4JDECPvP5JRECT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = jpeg_out_func_point(JDEC*, void*, JRECT*) &rArr; is_element_ok
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_element_ok
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tjpgd.o(i.jpg_decode)
</UL>
<P><STRONG><a name="[182]"></a>PageRegister_Displate(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, page_displate.o(i._Z21PageRegister_Displateh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PageRegister_Displate(unsigned char) &rArr; PageManager::PageRegister(unsigned char, void(*)(), void(*)(), void(*)(), void(*)(void*, int))
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageRegister(unsigned char, void(*)(), void(*)(), void(*)(), void(*)(void*, int))
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display_Init()
</UL>

<P><STRONG><a name="[187]"></a>tone(unsigned char, unsigned)</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tone.o(i._Z4tonehj))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = tone(unsigned char, unsigned) &rArr; Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptTimeUpdate
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptBase
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noTone(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned, unsigned)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Buzz_Tone(unsigned, int)
</UL>

<P><STRONG><a name="[188]"></a>tone(unsigned char, unsigned, unsigned)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tone.o(i._Z4tonehjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = tone(unsigned char, unsigned, unsigned) &rArr; tone(unsigned char, unsigned) &rArr; Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noTone(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Buzz_Tone(unsigned, int)
</UL>

<P><STRONG><a name="[190]"></a>setup()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i._Z5setupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = setup() &rArr; HAL::SDfatfs_Init() &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display_Init()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SDfatfs_Init()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Button_Init()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Buzz_init()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Audio_PlayMusic(const char*)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Audio_Init()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterrupt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[179]"></a>noTone(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tone.o(i._Z6noToneh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = noTone(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned, unsigned)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone_TimerHandler()
</UL>

<P><STRONG><a name="[8a]"></a>Draw_hook(const unsigned char*, int, int, int, int)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, display.o(i._Z9Draw_hookPKhiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = Draw_hook(const unsigned char*, int, int, int, int) &rArr; ai_load_picfile &rArr; jpg_decode &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(i.__sti___11_Display_cpp_1af8a7d1)
</UL>
<P><STRONG><a name="[8b]"></a>Load_hook(const unsigned char*, void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, display.o(i._Z9Load_hookPKhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = Load_hook(const unsigned char*, void*) &rArr; APP::SdSendToRam(const char*, void*) &rArr; APP::File_Read(const char*, unsigned char*, unsigned) &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::SdSendToRam(const char*, void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(i.__sti___11_Display_cpp_1af8a7d1)
</UL>
<P><STRONG><a name="[19c]"></a>SD_Manager::SD_PowerON()</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, sdfatfs.o(i._ZN10SD_Manager10SD_PowerONEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_Manager::SD_PowerON() &rArr; SD_Manager::CmdError()
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdError()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp7Error()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp3Error()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp1Error(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
</UL>

<P><STRONG><a name="[1a4]"></a>SD_Manager::SDEnWideBus(unsigned char)</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, sdfatfs.o(i._ZN10SD_Manager11SDEnWideBusEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_Manager::SDEnWideBus(unsigned char) &rArr; SD_Manager::FindSCR(unsigned short, unsigned*) &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::FindSCR(unsigned short, unsigned*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp1Error(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_EnableWideBusOperation(unsigned)
</UL>

<P><STRONG><a name="[1a6]"></a>SD_Manager::SD_ReadDisk(unsigned char*, unsigned, unsigned char)</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, sdfatfs.o(i._ZN10SD_Manager11SD_ReadDiskEPhjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = SD_Manager::SD_ReadDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_ReadMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_DMA_Config(unsigned*, unsigned, unsigned) &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadBlock(unsigned char*, long long, unsigned short)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[1a7]"></a>SD_Manager::SD_ReadBlock(unsigned char*, long long, unsigned short)</STRONG> (Thumb, 534 bytes, Stack size 48 bytes, sdfatfs.o(i._ZN10SD_Manager12SD_ReadBlockEPhxt))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SD_Manager::SD_ReadBlock(unsigned char*, long long, unsigned short) &rArr; SD_Manager::SD_DMA_Config(unsigned*, unsigned, unsigned) &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::convert_from_bytes_to_power_of_two(unsigned short)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_DMA_Config(unsigned*, unsigned, unsigned)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp1Error(unsigned char)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_INTX_ENABLE
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadDisk(unsigned char*, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[1b1]"></a>SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char)</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, sdfatfs.o(i._ZN10SD_Manager12SD_WriteDiskEPhjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteBlock(unsigned char*, long long, unsigned short)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[1a2]"></a>SD_Manager::CmdResp1Error(unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sdfatfs.o(i._ZN10SD_Manager13CmdResp1ErrorEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_Manager::CmdResp1Error(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::FindSCR(unsigned short, unsigned*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_SelectDeselect(unsigned)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ProcessIRQSrc()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteBlock(unsigned char*, long long, unsigned short)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadBlock(unsigned char*, long long, unsigned short)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SDEnWideBus(unsigned char)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_PowerON()
</UL>

<P><STRONG><a name="[1b4]"></a>SD_Manager::CmdResp2Error()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sdfatfs.o(i._ZN10SD_Manager13CmdResp2ErrorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_Manager::CmdResp2Error()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_InitializeCards()
</UL>

<P><STRONG><a name="[1a3]"></a>SD_Manager::CmdResp3Error()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdfatfs.o(i._ZN10SD_Manager13CmdResp3ErrorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_Manager::CmdResp3Error()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_PowerON()
</UL>

<P><STRONG><a name="[1b5]"></a>SD_Manager::CmdResp6Error(unsigned char, unsigned short*)</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sdfatfs.o(i._ZN10SD_Manager13CmdResp6ErrorEhPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_Manager::CmdResp6Error(unsigned char, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_InitializeCards()
</UL>

<P><STRONG><a name="[1a1]"></a>SD_Manager::CmdResp7Error()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sdfatfs.o(i._ZN10SD_Manager13CmdResp7ErrorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_Manager::CmdResp7Error()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_PowerON()
</UL>

<P><STRONG><a name="[1b0]"></a>SD_Manager::SD_DMA_Config(unsigned*, unsigned, unsigned)</STRONG> (Thumb, 112 bytes, Stack size 80 bytes, sdfatfs.o(i._ZN10SD_Manager13SD_DMA_ConfigEPjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SD_Manager::SD_DMA_Config(unsigned*, unsigned, unsigned) &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteBlock(unsigned char*, long long, unsigned short)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadBlock(unsigned char*, long long, unsigned short)
</UL>

<P><STRONG><a name="[1b2]"></a>SD_Manager::SD_WriteBlock(unsigned char*, long long, unsigned short)</STRONG> (Thumb, 750 bytes, Stack size 56 bytes, sdfatfs.o(i._ZN10SD_Manager13SD_WriteBlockEPhxt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SD_Manager::SD_WriteBlock(unsigned char*, long long, unsigned short) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::convert_from_bytes_to_power_of_two(unsigned short)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::IsCardProgramming(unsigned char*)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_DMA_Config(unsigned*, unsigned, unsigned)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp1Error(unsigned char)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_INTX_ENABLE
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[1c3]"></a>SD_Manager::SDIO_Clock_Set(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdfatfs.o(i._ZN10SD_Manager14SDIO_Clock_SetEh))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
</UL>

<P><STRONG><a name="[1c2]"></a>SD_Manager::SD_GetCardInfo(SD_Manager::SD_CardInfo*)</STRONG> (Thumb, 642 bytes, Stack size 28 bytes, sdfatfs.o(i._ZN10SD_Manager14SD_GetCardInfoEPNS_11SD_CardInfoE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SD_Manager::SD_GetCardInfo(SD_Manager::SD_CardInfo*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
</UL>

<P><STRONG><a name="[143]"></a>SD_Manager::SD_ProcessIRQSrc()</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, sdfatfs.o(i._ZN10SD_Manager16SD_ProcessIRQSrcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_Manager::SD_ProcessIRQSrc() &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp1Error(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[1c4]"></a>SD_Manager::SD_SetDeviceMode(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdfatfs.o(i._ZN10SD_Manager16SD_SetDeviceModeEj))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
</UL>

<P><STRONG><a name="[1bc]"></a>SD_Manager::IsCardProgramming(unsigned char*)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, sdfatfs.o(i._ZN10SD_Manager17IsCardProgrammingEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_Manager::IsCardProgramming(unsigned char*) &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteBlock(unsigned char*, long long, unsigned short)
</UL>

<P><STRONG><a name="[1bd]"></a>SD_Manager::SD_SelectDeselect(unsigned)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sdfatfs.o(i._ZN10SD_Manager17SD_SelectDeselectEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_Manager::SD_SelectDeselect(unsigned) &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp1Error(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
</UL>

<P><STRONG><a name="[1be]"></a>SD_Manager::SD_InitializeCards()</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, sdfatfs.o(i._ZN10SD_Manager18SD_InitializeCardsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_Manager::SD_InitializeCards() &rArr; SD_Manager::CmdResp6Error(unsigned char, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp6Error(unsigned char, unsigned short*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp2Error()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
</UL>

<P><STRONG><a name="[1a9]"></a>SD_Manager::SD_ReadMultiBlocks(unsigned char*, long long, unsigned short, unsigned)</STRONG> (Thumb, 628 bytes, Stack size 72 bytes, sdfatfs.o(i._ZN10SD_Manager18SD_ReadMultiBlocksEPhxtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SD_Manager::SD_ReadMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_DMA_Config(unsigned*, unsigned, unsigned) &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::convert_from_bytes_to_power_of_two(unsigned short)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_DMA_Config(unsigned*, unsigned, unsigned)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp1Error(unsigned char)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_INTX_ENABLE
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadDisk(unsigned char*, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[1b3]"></a>SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned)</STRONG> (Thumb, 794 bytes, Stack size 56 bytes, sdfatfs.o(i._ZN10SD_Manager19SD_WriteMultiBlocksEPhxtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::convert_from_bytes_to_power_of_two(unsigned short)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::IsCardProgramming(unsigned char*)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_DMA_Config(unsigned*, unsigned, unsigned)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp1Error(unsigned char)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_INTX_ENABLE
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char)
</UL>

<P><STRONG><a name="[1c1]"></a>SD_Manager::SDIO_Register_Deinit()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, sdfatfs.o(i._ZN10SD_Manager20SDIO_Register_DeinitEv))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
</UL>

<P><STRONG><a name="[1c0]"></a>SD_Manager::SD_EnableWideBusOperation(unsigned)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, sdfatfs.o(i._ZN10SD_Manager25SD_EnableWideBusOperationEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_Manager::SD_EnableWideBusOperation(unsigned) &rArr; SD_Manager::SDEnWideBus(unsigned char) &rArr; SD_Manager::FindSCR(unsigned short, unsigned*) &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SDEnWideBus(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
</UL>

<P><STRONG><a name="[1ab]"></a>SD_Manager::convert_from_bytes_to_power_of_two(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdfatfs.o(i._ZN10SD_Manager34convert_from_bytes_to_power_of_twoEt))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteBlock(unsigned char*, long long, unsigned short)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadBlock(unsigned char*, long long, unsigned short)
</UL>

<P><STRONG><a name="[1a5]"></a>SD_Manager::FindSCR(unsigned short, unsigned*)</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, sdfatfs.o(i._ZN10SD_Manager7FindSCREtPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_Manager::FindSCR(unsigned short, unsigned*) &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::CmdResp1Error(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SDEnWideBus(unsigned char)
</UL>

<P><STRONG><a name="[1bb]"></a>SD_Manager::SD_Init()</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, sdfatfs.o(i._ZN10SD_Manager7SD_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_EnableWideBusOperation(unsigned)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SDIO_Register_Deinit()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_InitializeCards()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_SelectDeselect(unsigned)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_SetDeviceMode(unsigned)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_GetCardInfo(SD_Manager::SD_CardInfo*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SDIO_Clock_Set(unsigned char)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_PowerON()
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SDfatfs_Init()
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteBlock(unsigned char*, long long, unsigned short)
</UL>

<P><STRONG><a name="[1a0]"></a>SD_Manager::CmdError()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sdfatfs.o(i._ZN10SD_Manager8CmdErrorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SD_Manager::CmdError()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_PowerON()
</UL>

<P><STRONG><a name="[1fa]"></a>SD_Manager::SD_Manager()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sdfatfs.o(i._ZN10SD_ManagerC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_Sdfatfs_cpp_SD_PATH
</UL>

<P><STRONG><a name="[261]"></a>SD_Manager::SD_Manager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sdfatfs.o(i._ZN10SD_ManagerC1Ev), UNUSED)

<P><STRONG><a name="[1ec]"></a>TonePlayer::Play()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, toneplayer.o(i._ZN10TonePlayer4PlayEv))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Audio_PlayMusic(const char*)
</UL>

<P><STRONG><a name="[1e9]"></a>TonePlayer::Update(unsigned)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, toneplayer.o(i._ZN10TonePlayer6UpdateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TonePlayer::Update(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Audio_Update()
</UL>

<P><STRONG><a name="[1eb]"></a>TonePlayer::SetMusic(const TonePlayer::MusicNode_t*, unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, toneplayer.o(i._ZN10TonePlayer8SetMusicEPKNS_11MusicNode_tEt))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Audio_PlayMusic(const char*)
</UL>

<P><STRONG><a name="[1fb]"></a>TonePlayer::TonePlayer()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, toneplayer.o(i._ZN10TonePlayerC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_APP_Music_cpp_6a466ea6
</UL>

<P><STRONG><a name="[262]"></a>TonePlayer::TonePlayer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, toneplayer.o(i._ZN10TonePlayerC1Ev), UNUSED)

<P><STRONG><a name="[1ed]"></a>ButtonEvent::EventAttach(void(*)(ButtonEvent*, int))</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, buttonevent.o(i._ZN11ButtonEvent11EventAttachEPFvPS_iE))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Button_Init()
</UL>

<P><STRONG><a name="[1c5]"></a>ButtonEvent::EventMonitor(bool)</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, buttonevent.o(i._ZN11ButtonEvent12EventMonitorEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ButtonEvent::EventMonitor(bool) &rArr; ButtonEvent::GetTickElaps(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonEvent::GetTickElaps(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Button_Scan()
</UL>

<P><STRONG><a name="[1c6]"></a>ButtonEvent::GetTickElaps(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, buttonevent.o(i._ZN11ButtonEvent12GetTickElapsEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ButtonEvent::GetTickElaps(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonEvent::EventMonitor(bool)
</UL>

<P><STRONG><a name="[1c7]"></a>ButtonEvent::ButtonEvent(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, buttonevent.o(i._ZN11ButtonEventC1Ettt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ButtonEvent::ButtonEvent(unsigned short, unsigned short, unsigned short) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Button_cpp_1974fa3d
</UL>

<P><STRONG><a name="[263]"></a>ButtonEvent::ButtonEvent__sub_object(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, buttonevent.o(i._ZN11ButtonEventC1Ettt), UNUSED)

<P><STRONG><a name="[1c9]"></a>PageManager::PageChangeTo(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pagemanager.o(i._ZN11PageManager12PageChangeToEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PageManager::PageChangeTo(unsigned char) &rArr; Print::println(const char*) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PagePush(unsigned char)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PagePop()
</UL>

<P><STRONG><a name="[177]"></a>PageManager::PageRegister(unsigned char, void(*)(), void(*)(), void(*)(), void(*)(void*, int))</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pagemanager.o(i._ZN11PageManager12PageRegisterEhPFvvES1_S1_PFvPviE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PageManager::PageRegister(unsigned char, void(*)(), void(*)(), void(*)(), void(*)(void*, int))
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageRegister_Displate(unsigned char)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageRegister_Master(unsigned char)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageRegister_Level(unsigned char)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageRegister_About(unsigned char)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageRegister_Game(unsigned char)
</UL>

<P><STRONG><a name="[1ce]"></a>PageManager::PageStackClear()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pagemanager.o(i._ZN11PageManager14PageStackClearEv))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageManager(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[175]"></a>PageManager::PageEventTransmit(void*, int)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pagemanager.o(i._ZN11PageManager17PageEventTransmitEPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PageManager::PageEventTransmit(void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_CallBack(ButtonEvent*, int)
</UL>

<P><STRONG><a name="[18b]"></a>PageManager::PagePop()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pagemanager.o(i._ZN11PageManager7PagePopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PageManager::PagePop() &rArr; PageManager::PageChangeTo(unsigned char) &rArr; Print::println(const char*) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageChangeTo(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
</UL>

<P><STRONG><a name="[1ca]"></a>PageManager::Running()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, pagemanager.o(i._ZN11PageManager7RunningEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PageManager::Running() &rArr; Print::println(const char*) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Running()
</UL>

<P><STRONG><a name="[189]"></a>PageManager::PagePush(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pagemanager.o(i._ZN11PageManager8PagePushEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PageManager::PagePush(unsigned char) &rArr; PageManager::PageChangeTo(unsigned char) &rArr; Print::println(const char*) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageChangeTo(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display_Init()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
</UL>

<P><STRONG><a name="[1cd]"></a>PageManager::PageClear(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, pagemanager.o(i._ZN11PageManager9PageClearEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PageManager::PageClear(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageManager(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1cb]"></a>PageManager::PageManager(unsigned char, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pagemanager.o(i._ZN11PageManagerC1Ehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PageManager::PageManager(unsigned char, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageClear(unsigned char)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageStackClear()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_Display_cpp_1af8a7d1
</UL>

<P><STRONG><a name="[264]"></a>PageManager::PageManager__sub_object(unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, pagemanager.o(i._ZN11PageManagerC1Ehh), UNUSED)

<P><STRONG><a name="[89]"></a>PageManager::~PageManager()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pagemanager.o(i._ZN11PageManagerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PageManager::~PageManager() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(i.__sti___11_Display_cpp_1af8a7d1)
</UL>
<P><STRONG><a name="[265]"></a>PageManager::~PageManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, pagemanager.o(i._ZN11PageManagerD1Ev), UNUSED)

<P><STRONG><a name="[171]"></a>Adafruit_GFX::drawCircle(short, short, short, unsigned short)</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX10drawCircleEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Adafruit_GFX::drawCircle(short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Option(unsigned char)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Option()
</UL>

<P><STRONG><a name="[99]"></a>Adafruit_GFX::startWrite()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX10startWriteEv))
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[9a]"></a>Adafruit_GFX::writePixel(short, short, unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX10writePixelEsst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adafruit_GFX::writePixel(short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[166]"></a>Adafruit_GFX::setTextSize(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX11setTextSizeEh))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Bar(int, int, int, unsigned short, unsigned short, const char*)
</UL>

<P><STRONG><a name="[165]"></a>Adafruit_GFX::setTextColor(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX12setTextColorEt))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Bar(int, int, int, unsigned short, unsigned short, const char*)
</UL>

<P><STRONG><a name="[a1]"></a>Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX13drawFastHLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[a0]"></a>Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX13drawFastVLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[164]"></a>Adafruit_GFX::fillRoundRect(short, short, short, short, short, unsigned short)</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX13fillRoundRectEssssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Adafruit_GFX::fillRoundRect(short, short, short, short, short, unsigned short) &rArr; Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Bar(int, int, int, unsigned short, unsigned short, const char*)
</UL>

<P><STRONG><a name="[9b]"></a>Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX13writeFillRectEsssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[9d]"></a>Adafruit_GFX::writeFastHLine(short, short, short, unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX14writeFastHLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adafruit_GFX::writeFastHLine(short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[9c]"></a>Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX14writeFastVLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[1d0]"></a>Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX16fillCircleHelperEssshst))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillRoundRect(short, short, short, short, short, unsigned short)
</UL>

<P><STRONG><a name="[96]"></a>Adafruit_GFX::write(unsigned char)</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Adafruit_GFX::write(unsigned char) &rArr; Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[167]"></a>Adafruit_GFX::setFont(const GFXfont*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX7setFontEPK7GFXfont))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background()
</UL>

<P><STRONG><a name="[1d1]"></a>Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 544 bytes, Stack size 104 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX8drawCharEsshtth))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::write(unsigned char)
</UL>

<P><STRONG><a name="[a3]"></a>Adafruit_GFX::drawRect(short, short, short, short, unsigned short)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX8drawRectEsssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adafruit_GFX::drawRect(short, short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[9f]"></a>Adafruit_GFX::endWrite()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX8endWriteEv))
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[a2]"></a>Adafruit_GFX::fillRect(short, short, short, short, unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX8fillRectEsssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adafruit_GFX::fillRect(short, short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_Fill(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Option(bool)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[9e]"></a>Adafruit_GFX::writeLine(short, short, short, short, unsigned short)</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX9writeLineEsssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Adafruit_GFX::writeLine(short, short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[1e4]"></a>Adafruit_GFX::Adafruit_GFX__sub_object(short, short)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFXC2Ess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adafruit_GFX::Adafruit_GFX__sub_object(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::Adafruit_ST7789(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[18d]"></a>PTBox_Manager::Draw_Single_Block(int, int)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, game_box.o(i._ZN13PTBox_Manager17Draw_Single_BlockEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PTBox_Manager::Draw_Single_Block(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTBox_Manager::Running()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTBox_Manager::Load(_Level_ID_)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
</UL>

<P><STRONG><a name="[186]"></a>PTBox_Manager::Load(_Level_ID_)</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, game_box.o(i._ZN13PTBox_Manager4LoadE10_Level_ID_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PTBox_Manager::Load(_Level_ID_) &rArr; PTBox_Manager::Draw_Single_Block(int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTBox_Manager::Draw_Single_Block(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop()
</UL>

<P><STRONG><a name="[184]"></a>PTBox_Manager::Running()</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, game_box.o(i._ZN13PTBox_Manager7RunningEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PTBox_Manager::Running() &rArr; PTBox_Manager::Draw_Single_Block(int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTBox_Manager::Draw_Single_Block(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop()
</UL>

<P><STRONG><a name="[160]"></a>HardwareSerial::IRQHandler()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hardwareserial.o(i._ZN14HardwareSerial10IRQHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HardwareSerial::IRQHandler() &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[226]"></a>HardwareSerial::begin(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial5beginEj))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d5]"></a>HardwareSerial::begin(unsigned, SERIAL_Config)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hardwareserial.o(i._ZN14HardwareSerial5beginEj13SERIAL_Config), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1d6]"></a>HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)</STRONG> (Thumb, 286 bytes, Stack size 80 bytes, hardwareserial.o(i._ZN14HardwareSerial5beginEj13SERIAL_Confighh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinSource
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config)
</UL>

<P><STRONG><a name="[a4]"></a>HardwareSerial::write(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hardwareserial.o(i._ZN14HardwareSerial5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardwareSerial::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[1fc]"></a>HardwareSerial::HardwareSerial(USART_TypeDef*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerialC1EP13USART_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_HardwareSerial_cpp_cfa1b6a6
</UL>

<P><STRONG><a name="[266]"></a>HardwareSerial::HardwareSerial__sub_object(USART_TypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerialC1EP13USART_TypeDef), UNUSED)

<P><STRONG><a name="[a9]"></a>Adafruit_ST7789::fillScreen(unsigned short)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST778910fillScreenEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Adafruit_ST7789::fillScreen(unsigned short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData16(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display_Init()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exit()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exit()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exit()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exit()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
</UL>
<P><STRONG><a name="[a6]"></a>Adafruit_ST7789::setRotation(unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST778911setRotationEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Adafruit_ST7789::setRotation(unsigned char) &rArr; Adafruit_ST7789::writeData(unsigned char) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData(unsigned char)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeCommand(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
</UL>
<P><STRONG><a name="[1db]"></a>Adafruit_ST7789::writeData16(unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST778911writeData16Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char) const
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::spiWrite(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::drawPixel(short, short, unsigned short)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::drawFastHLine(short, short, short, unsigned short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::setAddrWindow(short, short, short, short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::drawFastVLine(short, short, short, unsigned short)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::fillScreen(unsigned short)
</UL>

<P><STRONG><a name="[1dc]"></a>Adafruit_ST7789::writeCommand(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST778912writeCommandEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adafruit_ST7789::writeCommand(unsigned char) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char) const
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::spiWrite(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::begin()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::setAddrWindow(short, short, short, short)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::setRotation(unsigned char)
</UL>

<P><STRONG><a name="[a8]"></a>Adafruit_ST7789::drawFastHLine(short, short, short, unsigned short)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST778913drawFastHLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Adafruit_ST7789::drawFastHLine(short, short, short, unsigned short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData16(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_draw_hline(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
</UL>
<P><STRONG><a name="[a7]"></a>Adafruit_ST7789::drawFastVLine(short, short, short, unsigned short)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST778913drawFastVLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Adafruit_ST7789::drawFastVLine(short, short, short, unsigned short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData16(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
</UL>
<P><STRONG><a name="[aa]"></a>Adafruit_ST7789::setAddrWindow(short, short, short, short)</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST778913setAddrWindowEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Adafruit_ST7789::setAddrWindow(short, short, short, short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeCommand(unsigned char)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData16(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
</UL>
<P><STRONG><a name="[ac]"></a>Adafruit_ST7789::drawFastRGBBitmap(short, short, unsigned short*, short, short)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST778917drawFastRGBBitmapEssPtss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Adafruit_ST7789::drawFastRGBBitmap(short, short, unsigned short*, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_fill_color(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
</UL>
<P><STRONG><a name="[1e0]"></a>Adafruit_ST7789::begin()</STRONG> (Thumb, 580 bytes, Stack size 8 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST77895beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Adafruit_ST7789::begin() &rArr; SPIClass::begin() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setClock(unsigned)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData(unsigned char)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeCommand(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display_Init()
</UL>

<P><STRONG><a name="[1df]"></a>Adafruit_ST7789::spiWrite(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST77898spiWriteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adafruit_ST7789::spiWrite(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData(unsigned char)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeCommand(unsigned char)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData16(unsigned short)
</UL>

<P><STRONG><a name="[a5]"></a>Adafruit_ST7789::drawPixel(short, short, unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST77899drawPixelEsst))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Adafruit_ST7789::drawPixel(short, short, unsigned short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData16(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_Draw_Point(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
</UL>
<P><STRONG><a name="[ab]"></a>Adafruit_ST7789::setCursor(short, short)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST77899setCursorEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adafruit_ST7789::setCursor(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Bar(int, int, int, unsigned short, unsigned short, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
</UL>
<P><STRONG><a name="[1dd]"></a>Adafruit_ST7789::writeData(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST77899writeDataEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adafruit_ST7789::writeData(unsigned char) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char) const
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::spiWrite(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::begin()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::setRotation(unsigned char)
</UL>

<P><STRONG><a name="[1e3]"></a>Adafruit_ST7789::Adafruit_ST7789(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST7789C1Ehhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Adafruit_ST7789::Adafruit_ST7789(unsigned char, unsigned char, unsigned char) &rArr; Adafruit_GFX::Adafruit_GFX__sub_object(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::Adafruit_GFX__sub_object(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_Display_cpp_1af8a7d1
</UL>

<P><STRONG><a name="[267]"></a>Adafruit_ST7789::Adafruit_ST7789__sub_object(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST7789C1Ehhh), UNUSED)

<P><STRONG><a name="[1fe]"></a>MillisTaskManager::MillisTaskManager(bool)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, millistaskmanager.o(i._ZN17MillisTaskManagerC1Eb))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_0040b0e8
</UL>

<P><STRONG><a name="[268]"></a>MillisTaskManager::MillisTaskManager__sub_object(bool)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, millistaskmanager.o(i._ZN17MillisTaskManagerC1Eb), UNUSED)

<P><STRONG><a name="[8d]"></a>MillisTaskManager::~MillisTaskManager()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, millistaskmanager.o(i._ZN17MillisTaskManagerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MillisTaskManager::~MillisTaskManager() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_0040b0e8)
</UL>
<P><STRONG><a name="[269]"></a>MillisTaskManager::~MillisTaskManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, millistaskmanager.o(i._ZN17MillisTaskManagerD1Ev), UNUSED)

<P><STRONG><a name="[194]"></a>APP::Audio_Init()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_music.o(i._ZN3APP10Audio_InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[18e]"></a>APP::File_Write(const char*, void*, unsigned)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_sdfatfs.o(i._ZN3APP10File_WriteEPKcPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = APP::File_Write(const char*, void*, unsigned) &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::RamSendToSd(const char*, void*)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
</UL>

<P><STRONG><a name="[18f]"></a>APP::RamSendToSd(const char*, void*)</STRONG> (Thumb, 42 bytes, Stack size 120 bytes, app_sdfatfs.o(i._ZN3APP11RamSendToSdEPKcPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = APP::RamSendToSd(const char*, void*) &rArr; APP::File_Write(const char*, void*, unsigned) &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::File_Write(const char*, void*, unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
</UL>

<P><STRONG><a name="[19b]"></a>APP::SdSendToRam(const char*, void*)</STRONG> (Thumb, 42 bytes, Stack size 112 bytes, app_sdfatfs.o(i._ZN3APP11SdSendToRamEPKcPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = APP::SdSendToRam(const char*, void*) &rArr; APP::File_Read(const char*, unsigned char*, unsigned) &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::File_Read(const char*, unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_hook(const unsigned char*, void*)
</UL>

<P><STRONG><a name="[17f]"></a>APP::Audio_Update()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, app_music.o(i._ZN3APP12Audio_UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = APP::Audio_Update() &rArr; TonePlayer::Update(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TonePlayer::Update(unsigned)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InterrputUpdate()
</UL>

<P><STRONG><a name="[18c]"></a>APP::Buzz_SetEnable(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_music.o(i._ZN3APP14Buzz_SetEnableEb))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
</UL>

<P><STRONG><a name="[185]"></a>APP::Audio_PlayMusic(const char*)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, app_music.o(i._ZN3APP15Audio_PlayMusicEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = APP::Audio_PlayMusic(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TonePlayer::SetMusic(const TonePlayer::MusicNode_t*, unsigned short)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TonePlayer::Play()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop()
</UL>

<P><STRONG><a name="[172]"></a>APP::Buzz_Tone(unsigned, int)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_music.o(i._ZN3APP9Buzz_ToneEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = APP::Buzz_Tone(unsigned, int) &rArr; tone(unsigned char, unsigned, unsigned) &rArr; tone(unsigned char, unsigned) &rArr; Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned, unsigned)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tone_Callback(unsigned, unsigned short)
</UL>

<P><STRONG><a name="[193]"></a>APP::Buzz_init()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_music.o(i._ZN3APP9Buzz_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = APP::Buzz_init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[18a]"></a>APP::File_Read(const char*, unsigned char*, unsigned)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_sdfatfs.o(i._ZN3APP9File_ReadEPKcPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = APP::File_Read(const char*, unsigned char*, unsigned) &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::SdSendToRam(const char*, void*)
</UL>

<P><STRONG><a name="[192]"></a>HAL::Button_Init()</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, button.o(i._ZN3HAL11Button_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL::Button_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonEvent::EventAttach(void(*)(ButtonEvent*, int))
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[17e]"></a>HAL::Button_Scan()</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, button.o(i._ZN3HAL11Button_ScanEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL::Button_Scan() &rArr; ButtonEvent::EventMonitor(bool) &rArr; ButtonEvent::GetTickElaps(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonEvent::EventMonitor(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InterrputUpdate()
</UL>

<P><STRONG><a name="[191]"></a>HAL::SDfatfs_Init()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sdfatfs.o(i._ZN3HAL12SDfatfs_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = HAL::SDfatfs_Init() &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;piclib_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[1f0]"></a>Print::print(const char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printf(const char*, ...)
</UL>

<P><STRONG><a name="[1f2]"></a>Print::print(char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEc))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
</UL>

<P><STRONG><a name="[97]"></a>Print::write(const char*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, print.o(i._ZN5Print5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::write(const char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
<LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[168]"></a>Print::printf(const char*, ...)</STRONG> (Thumb, 40 bytes, Stack size 160 bytes, print.o(i._ZN5Print6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Print::printf(const char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop()
</UL>

<P><STRONG><a name="[169]"></a>Print::println(const char*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::println(const char*) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Running()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageChangeTo(unsigned char)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Bar(int, int, int, unsigned short, unsigned short, const char*)
</UL>

<P><STRONG><a name="[1f1]"></a>Print::println()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
</UL>

<P><STRONG><a name="[183]"></a>Display::Adjust_light(bool, signed char, unsigned short)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, display.o(i._ZN7Display12Adjust_lightEbat))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Display::Adjust_light(bool, signed char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exit()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exit()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exit()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exit()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exit()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup()
</UL>

<P><STRONG><a name="[195]"></a>Display::Display_Init()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, display.o(i._ZN7Display12Display_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Display::Display_Init() &rArr; Adafruit_ST7789::begin() &rArr; SPIClass::begin() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PagePush(unsigned char)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::begin()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::fillScreen(unsigned short)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageRegister_Displate(unsigned char)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageRegister_Master(unsigned char)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageRegister_Level(unsigned char)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageRegister_About(unsigned char)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageRegister_Game(unsigned char)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>

<P><STRONG><a name="[1f4]"></a>Display::Running()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, display.o(i._ZN7Display7RunningEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Display::Running() &rArr; PageManager::Running() &rArr; Print::println(const char*) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Running()
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fd]"></a>TwoWire::TwoWire(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWireC1Ehhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoWire::TwoWire(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Wire_cpp_928ee5ff
</UL>

<P><STRONG><a name="[26a]"></a>TwoWire::TwoWire__sub_object(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWireC1Ehhh), UNUSED)

<P><STRONG><a name="[8c]"></a>TwoWire::~TwoWire()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWireD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> wire.o(i.__sti___8_Wire_cpp_928ee5ff)
</UL>
<P><STRONG><a name="[26b]"></a>TwoWire::~TwoWire__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWireD1Ev), UNUSED)

<P><STRONG><a name="[1f5]"></a>SPIClass::SPI_Settings(SPI_TypeDef*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, spi.o(i._ZN8SPIClass12SPI_SettingsEP11SPI_TypeDeftttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPIClass::SPI_Settings(SPI_TypeDef*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>

<P><STRONG><a name="[1e1]"></a>SPIClass::begin()</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, spi.o(i._ZN8SPIClass5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SPIClass::begin() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPI_Settings(SPI_TypeDef*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::begin()
</UL>

<P><STRONG><a name="[1e2]"></a>SPIClass::setClock(unsigned)</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, spi.o(i._ZN8SPIClass8setClockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPIClass::setClock(unsigned) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::begin()
</UL>

<P><STRONG><a name="[1de]"></a>SPIClass::transfer(unsigned char) const</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi.o(i._ZNK8SPIClass8transferEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIClass::transfer(unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData(unsigned char)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeCommand(unsigned char)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData16(unsigned short)
</UL>

<P><STRONG><a name="[1cf]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::~PageManager()
</UL>

<P><STRONG><a name="[1e5]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MillisTaskManager::~MillisTaskManager()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[1cc]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageManager(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1f8]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[114]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[98]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[100]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[224]"></a>ai_draw_init</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, piclib.o(i.ai_draw_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
</UL>

<P><STRONG><a name="[16a]"></a>ai_load_picfile</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, piclib.o(i.ai_load_picfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ai_load_picfile &rArr; jpg_decode &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Option()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_hook(const unsigned char*, int, int, int, int)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop()
</UL>

<P><STRONG><a name="[1f3]"></a>analogWrite</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arduino.o(i.analogWrite))
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Display_Init()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Adjust_light(bool, signed char, unsigned short)
</UL>

<P><STRONG><a name="[20d]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[16c]"></a>delay_ms</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::begin()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Bar(int, int, int, unsigned short, unsigned short, const char*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Adjust_light(bool, signed char, unsigned short)
</UL>

<P><STRONG><a name="[196]"></a>digitalWrite</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arduino.o(i.digitalWrite))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::begin()
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noTone(unsigned char)
</UL>

<P><STRONG><a name="[20a]"></a>dir_sdi</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[210]"></a>disk_initialize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = disk_initialize &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[211]"></a>disk_ioctl</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_ioctl &rArr; __aeabi_ldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[213]"></a>disk_read</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = disk_read &rArr; SD_Manager::SD_ReadDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_ReadMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_DMA_Config(unsigned*, unsigned, unsigned) &rArr; DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_ReadDisk(unsigned char*, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[220]"></a>disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[214]"></a>disk_write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[1e8]"></a>f_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::File_Read(const char*, unsigned char*, unsigned)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::File_Write(const char*, void*, unsigned)
</UL>

<P><STRONG><a name="[16e]"></a>f_lseek</STRONG> (Thumb, 534 bytes, Stack size 48 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_in_func(JDEC*, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[1ee]"></a>f_mount</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SDfatfs_Init()
</UL>

<P><STRONG><a name="[1e6]"></a>f_open</STRONG> (Thumb, 314 bytes, Stack size 88 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::File_Read(const char*, unsigned char*, unsigned)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::File_Write(const char*, void*, unsigned)
</UL>

<P><STRONG><a name="[16d]"></a>f_read</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_in_func(JDEC*, unsigned char*, unsigned)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::File_Read(const char*, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[215]"></a>f_sync</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[1e7]"></a>f_write</STRONG> (Thumb, 394 bytes, Stack size 48 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::File_Write(const char*, void*, unsigned)
</UL>

<P><STRONG><a name="[204]"></a>get_fat</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[21b]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[181]"></a>is_element_ok</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, piclib.o(i.is_element_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_element_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpeg_out_func_point(JDEC*, void*, JRECT*)
</UL>

<P><STRONG><a name="[221]"></a>jd_decomp</STRONG> (Thumb, 244 bytes, Stack size 64 bytes, tjpgd.o(i.jd_decomp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = jd_decomp &rArr; mcu_output(JDEC*, unsigned(*)(JDEC*, void*, JRECT*), unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load(JDEC*)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_output(JDEC*, unsigned(*)(JDEC*, void*, JRECT*), unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
</UL>

<P><STRONG><a name="[223]"></a>jd_prepare</STRONG> (Thumb, 724 bytes, Stack size 40 bytes, tjpgd.o(i.jd_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = jd_prepare &rArr; create_huffman_tbl(JDEC*, const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl(JDEC*, const unsigned char*, unsigned)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool(JDEC*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jpg_decode
</UL>

<P><STRONG><a name="[1ff]"></a>jpg_decode</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, tjpgd.o(i.jpg_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = jpg_decode &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_draw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
</UL>

<P><STRONG><a name="[ec]"></a>main</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = main &rArr; setup() &rArr; HAL::SDfatfs_Init() &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Running()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup()
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[178]"></a>millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, delay.o(i.millis))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Audio_Update()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonEvent::GetTickElaps(unsigned)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonEvent::EventMonitor(bool)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned, unsigned)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone_TimerHandler()
</UL>

<P><STRONG><a name="[1ef]"></a>piclib_init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, piclib.o(i.piclib_init))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SDfatfs_Init()
</UL>

<P><STRONG><a name="[13e]"></a>pinMode</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, arduino.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + In Cycle
<LI>Call Chain = pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Button_Init()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Buzz_init()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Init()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::begin()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[205]"></a>put_fat</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[200]"></a>pwmWrite</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pwm.o(i.pwmWrite))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogWrite
</UL>

<P><STRONG><a name="[6f]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[dc]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[26c]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[26d]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[c0]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[85]"></a>HAL_InterrputUpdate()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i._Z19HAL_InterrputUpdatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InterrputUpdate() &rArr; HAL::Button_Scan() &rArr; ButtonEvent::EventMonitor(bool) &rArr; ButtonEvent::GetTickElaps(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Button_Scan()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Audio_Update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i._Z5setupv)
</UL>
<P><STRONG><a name="[ad]"></a>__sti___8_main_cpp_0040b0e8</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.__sti___8_main_cpp_0040b0e8))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___8_main_cpp_0040b0e8 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MillisTaskManager::MillisTaskManager(bool)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[17d]"></a>alloc_pool(JDEC*, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tjpgd.o(i._Z10alloc_poolP4JDECj))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl(JDEC*, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[19a]"></a>block_idct(long*, unsigned char*)</STRONG> (Thumb, 484 bytes, Stack size 36 bytes, tjpgd.o(i._Z10block_idctPlPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = block_idct(long*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load(JDEC*)
</UL>

<P><STRONG><a name="[222]"></a>mcu_output(JDEC*, unsigned(*)(JDEC*, void*, JRECT*), unsigned, unsigned)</STRONG> (Thumb, 786 bytes, Stack size 128 bytes, tjpgd.o(i._Z10mcu_outputP4JDECPFjS0_PvP5JRECTEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mcu_output(JDEC*, unsigned(*)(JDEC*, void*, JRECT*), unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[17c]"></a>create_huffman_tbl(JDEC*, const unsigned char*, unsigned)</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, tjpgd.o(i._Z18create_huffman_tblP4JDECPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = create_huffman_tbl(JDEC*, const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool(JDEC*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
</UL>

<P><STRONG><a name="[199]"></a>bitext(JDEC*, unsigned)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tjpgd.o(i._Z6bitextP4JDECj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bitext(JDEC*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load(JDEC*)
</UL>

<P><STRONG><a name="[198]"></a>huffext(JDEC*, const unsigned char*, const unsigned short*, const unsigned char*)</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, tjpgd.o(i._Z7huffextP4JDECPKhPKtS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = huffext(JDEC*, const unsigned char*, const unsigned short*, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load(JDEC*)
</UL>

<P><STRONG><a name="[197]"></a>mcu_load(JDEC*)</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, tjpgd.o(i._Z8mcu_loadP4JDEC))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mcu_load(JDEC*) &rArr; huffext(JDEC*, const unsigned char*, const unsigned short*, const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffext(JDEC*, const unsigned char*, const unsigned short*, const unsigned char*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitext(JDEC*, unsigned)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_idct(long*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[201]"></a>check_fs</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[208]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[217]"></a>clmt_clust</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.clmt_clust))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[203]"></a>create_chain</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[206]"></a>create_name</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[209]"></a>dir_alloc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[20b]"></a>dir_next</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[20e]"></a>dir_register</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[219]"></a>find_volume</STRONG> (Thumb, 552 bytes, Stack size 48 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[21a]"></a>follow_path</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = follow_path &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[218]"></a>get_ldnumber</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[21c]"></a>ld_clust</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[20f]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[207]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[202]"></a>move_window</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[21e]"></a>remove_chain</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[21d]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[21f]"></a>sync_fs</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[20c]"></a>sync_window</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[216]"></a>validate</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[ae]"></a>__sti___11_Sdfatfs_cpp_SD_PATH</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdfatfs.o(i.__sti___11_Sdfatfs_cpp_SD_PATH))
<BR><BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Manager::SD_Manager()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdfatfs.o(.init_array)
</UL>
<P><STRONG><a name="[af]"></a>__sti___10_Button_cpp_1974fa3d</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, button.o(i.__sti___10_Button_cpp_1974fa3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __sti___10_Button_cpp_1974fa3d &rArr; ButtonEvent::ButtonEvent(unsigned short, unsigned short, unsigned short) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonEvent::ButtonEvent(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.init_array)
</UL>
<P><STRONG><a name="[86]"></a>Tone_Callback(unsigned, unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_music.o(i._Z13Tone_Callbackjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Tone_Callback(unsigned, unsigned short) &rArr; APP::Buzz_Tone(unsigned, int) &rArr; tone(unsigned char, unsigned, unsigned) &rArr; tone(unsigned char, unsigned) &rArr; Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Buzz_Tone(unsigned, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_music.o(i._ZN3APP10Audio_InitEv)
</UL>
<P><STRONG><a name="[b0]"></a>__sti___13_APP_Music_cpp_6a466ea6</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_music.o(i.__sti___13_APP_Music_cpp_6a466ea6))
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TonePlayer::TonePlayer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_music.o(.init_array)
</UL>
<P><STRONG><a name="[b1]"></a>__sti___11_Display_cpp_1af8a7d1</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, display.o(i.__sti___11_Display_cpp_1af8a7d1))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___11_Display_cpp_1af8a7d1 &rArr; PageManager::PageManager(unsigned char, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageManager(unsigned char, unsigned char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::Adafruit_ST7789(unsigned char, unsigned char, unsigned char)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.init_array)
</UL>
<P><STRONG><a name="[16b]"></a>Create_Bar(int, int, int, unsigned short, unsigned short, const char*)</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, page_displate.o(i._Z10Create_BariiittPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Create_Bar(int, int, int, unsigned short, unsigned short, const char*) &rArr; Adafruit_GFX::fillRoundRect(short, short, short, short, short, unsigned short) &rArr; Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillRoundRect(short, short, short, short, short, unsigned short)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setTextColor(unsigned short)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setTextSize(unsigned char)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::setCursor(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup()
</UL>

<P><STRONG><a name="[82]"></a>Exit()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, page_displate.o(i._Z4Exitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Exit() &rArr; Adafruit_ST7789::fillScreen(unsigned short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::fillScreen(unsigned short)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Adjust_light(bool, signed char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_displate.o(i._Z21PageRegister_Displateh)
</UL>
<P><STRONG><a name="[81]"></a>Event(void*, int)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, page_displate.o(i._Z5EventPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Event(void*, int) &rArr; PageManager::PagePush(unsigned char) &rArr; PageManager::PageChangeTo(unsigned char) &rArr; Print::println(const char*) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PagePush(unsigned char)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Audio_PlayMusic(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_displate.o(i._Z21PageRegister_Displateh)
</UL>
<P><STRONG><a name="[83]"></a>Setup()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, page_displate.o(i._Z5Setupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Setup() &rArr; ai_load_picfile &rArr; jpg_decode &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Bar(int, int, int, unsigned short, unsigned short, const char*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Adjust_light(bool, signed char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_displate.o(i._Z21PageRegister_Displateh)
</UL>
<P><STRONG><a name="[16f]"></a>Create_Option()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, page_master.o(i._Z13Create_Optionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Create_Option() &rArr; ai_load_picfile &rArr; jpg_decode &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Option(bool)
</UL>

<P><STRONG><a name="[173]"></a>Update_Option(bool)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, page_master.o(i._Z13Update_Optionb))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = Update_Option(bool) &rArr; Create_Option() &rArr; ai_load_picfile &rArr; jpg_decode &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillRect(short, short, short, short, unsigned short)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Option()
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
</UL>

<P><STRONG><a name="[7f]"></a>Exit()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, page_master.o(i._Z4Exitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Exit() &rArr; Adafruit_ST7789::fillScreen(unsigned short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::fillScreen(unsigned short)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Adjust_light(bool, signed char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_master.o(i._Z19PageRegister_Masterh)
</UL>
<P><STRONG><a name="[7e]"></a>Event(void*, int)</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, page_master.o(i._Z5EventPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = Event(void*, int) &rArr; Update_Option(bool) &rArr; Create_Option() &rArr; ai_load_picfile &rArr; jpg_decode &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PagePush(unsigned char)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Audio_PlayMusic(const char*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printf(const char*, ...)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Option(bool)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::File_Read(const char*, unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_master.o(i._Z19PageRegister_Masterh)
</UL>
<P><STRONG><a name="[80]"></a>Setup()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, page_master.o(i._Z5Setupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = Setup() &rArr; Create_Option() &rArr; ai_load_picfile &rArr; jpg_decode &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Option()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Adjust_light(bool, signed char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_master.o(i._Z19PageRegister_Masterh)
</UL>
<P><STRONG><a name="[170]"></a>Create_Option()</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, page_level.o(i._Z13Create_Optionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Create_Option() &rArr; Adafruit_GFX::drawCircle(short, short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawCircle(short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Option(unsigned char)
</UL>

<P><STRONG><a name="[174]"></a>Update_Option(unsigned char)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, page_level.o(i._Z13Update_Optionh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Update_Option(unsigned char) &rArr; Create_Option() &rArr; Adafruit_GFX::drawCircle(short, short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawCircle(short, short, short, unsigned short)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Option()
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event(void*, int)
</UL>

<P><STRONG><a name="[7c]"></a>Exit()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, page_level.o(i._Z4Exitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Exit() &rArr; Adafruit_ST7789::fillScreen(unsigned short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::fillScreen(unsigned short)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Adjust_light(bool, signed char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_level.o(i._Z18PageRegister_Levelh)
</UL>
<P><STRONG><a name="[7b]"></a>Event(void*, int)</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, page_level.o(i._Z5EventPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Event(void*, int) &rArr; Update_Option(unsigned char) &rArr; Create_Option() &rArr; Adafruit_GFX::drawCircle(short, short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PagePush(unsigned char)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Audio_PlayMusic(const char*)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Option(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_level.o(i._Z18PageRegister_Levelh)
</UL>
<P><STRONG><a name="[7d]"></a>Setup()</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, page_level.o(i._Z5Setupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = Setup() &rArr; ai_load_picfile &rArr; jpg_decode &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawCircle(short, short, short, unsigned short)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Create_Option()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Adjust_light(bool, signed char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_level.o(i._Z18PageRegister_Levelh)
</UL>
<P><STRONG><a name="[163]"></a>Background()</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, page_about.o(i._Z10Backgroundv))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Background() &rArr; ai_load_picfile &rArr; jpg_decode &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawRect(short, short, short, short, unsigned short)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setFont(const GFXfont*)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillRoundRect(short, short, short, short, short, unsigned short)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setTextColor(unsigned short)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setTextSize(unsigned char)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::setCursor(short, short)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::fillScreen(unsigned short)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printf(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup()
</UL>

<P><STRONG><a name="[79]"></a>Exit()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, page_about.o(i._Z4Exitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Exit() &rArr; Adafruit_ST7789::fillScreen(unsigned short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::fillScreen(unsigned short)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Adjust_light(bool, signed char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_about.o(i._Z18PageRegister_Abouth)
</UL>
<P><STRONG><a name="[78]"></a>Event(void*, int)</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, page_about.o(i._Z5EventPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = Event(void*, int) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PagePop()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Audio_PlayMusic(const char*)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setFont(const GFXfont*)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setTextColor(unsigned short)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setTextSize(unsigned char)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillRect(short, short, short, short, unsigned short)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::setCursor(short, short)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printf(const char*, ...)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Buzz_SetEnable(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_about.o(i._Z18PageRegister_Abouth)
</UL>
<P><STRONG><a name="[7a]"></a>Setup()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, page_about.o(i._Z5Setupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = Setup() &rArr; Background() &rArr; ai_load_picfile &rArr; jpg_decode &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Adjust_light(bool, signed char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_about.o(i._Z18PageRegister_Abouth)
</UL>
<P><STRONG><a name="[75]"></a>Exit()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, page_game.o(i._Z4Exitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Exit() &rArr; Adafruit_ST7789::fillScreen(unsigned short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::fillScreen(unsigned short)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Adjust_light(bool, signed char, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_game.o(i._Z17PageRegister_Gameh)
</UL>
<P><STRONG><a name="[76]"></a>Loop()</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, page_game.o(i._Z4Loopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = Loop() &rArr; ai_load_picfile &rArr; jpg_decode &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Audio_PlayMusic(const char*)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printf(const char*, ...)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Adjust_light(bool, signed char, unsigned short)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTBox_Manager::Running()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTBox_Manager::Load(_Level_ID_)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_game.o(i._Z17PageRegister_Gameh)
</UL>
<P><STRONG><a name="[74]"></a>Event(void*, int)</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, page_game.o(i._Z5EventPvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = Event(void*, int) &rArr; APP::RamSendToSd(const char*, void*) &rArr; APP::File_Write(const char*, void*, unsigned) &rArr; f_open &rArr; dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_Manager::SD_WriteDisk(unsigned char*, unsigned, unsigned char) &rArr; SD_Manager::SD_WriteMultiBlocks(unsigned char*, long long, unsigned short, unsigned) &rArr; SD_Manager::SD_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PagePush(unsigned char)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::Audio_PlayMusic(const char*)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_load_picfile
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::RamSendToSd(const char*, void*)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP::File_Write(const char*, void*, unsigned)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTBox_Manager::Draw_Single_Block(int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_game.o(i._Z17PageRegister_Gameh)
</UL>
<P><STRONG><a name="[77]"></a>Setup()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, page_game.o(i._Z5Setupv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Setup() &rArr; PTBox_Manager::Load(_Level_ID_) &rArr; PTBox_Manager::Draw_Single_Block(int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display::Adjust_light(bool, signed char, unsigned short)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTBox_Manager::Load(_Level_ID_)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> page_game.o(i._Z17PageRegister_Gameh)
</UL>
<P><STRONG><a name="[b2]"></a>__sti___18_HardwareSerial_cpp_cfa1b6a6</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hardwareserial.o(i.__sti___18_HardwareSerial_cpp_cfa1b6a6))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___18_HardwareSerial_cpp_cfa1b6a6
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial(USART_TypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.init_array)
</UL>
<P><STRONG><a name="[b3]"></a>__sti___7_SPI_cpp_ce5662b4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi.o(i.__sti___7_SPI_cpp_ce5662b4))
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.init_array)
</UL>
<P><STRONG><a name="[84]"></a>tone_TimerHandler()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tone.o(i._Z17tone_TimerHandlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tone_TimerHandler() &rArr; noTone(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noTone(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tone.o(i._Z4tonehj)
</UL>
<P><STRONG><a name="[b4]"></a>__sti___8_Wire_cpp_928ee5ff</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wire.o(i.__sti___8_Wire_cpp_928ee5ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___8_Wire_cpp_928ee5ff &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::TwoWire(unsigned char, unsigned char, unsigned char)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.init_array)
</UL>
<P><STRONG><a name="[144]"></a>SetSysClock</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[132]"></a>ADC_DMA_SearchChannel</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, adc.o(i.ADC_DMA_SearchChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMA_SearchChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Register
</UL>

<P><STRONG><a name="[135]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, delay.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[158]"></a>Timer_TimeToArrPsc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, timer.o(i.Timer_TimeToArrPsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_TimeToArrPsc
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterrupt
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptTimeUpdate
</UL>

<P><STRONG><a name="[10d]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[72]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
